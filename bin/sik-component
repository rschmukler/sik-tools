#! /usr/bin/env node

var sik = require('../index.js'),
    utils = sik.utils,
    runner = sik.runner;

var program = require('commander');

program.usage('<component-name> [options]');



program.option('-d, --dir'                     , 'directory, default is lib/components');
program.option('-j, --javascript [scripts]'    , 'include javascript [component-name.js]');
program.option('-l, --locals <locals>'         , 'add <local> dependencies to component');
program.option('-p, --partials [partials]'     , 'include partials [template.jade]');
program.option('-s, --styles [styles]'         , 'include styling [component-name.styl]');
program.option('-t, --templates [templates]'   , 'include templates [template.jade]');

program.parse(process.argv);

var componentName = program.args[0];



if (!componentName) {
  program.help();
  process.exit();
}


var config = {
  resourceName: 'component',
  localComponent: componentName,
  target: process.cwd() + '/' + (program.dir || 'lib/components') + '/' + componentName,
  touchFiles: []
};

var extensionMap = {
  'partials': 'jade',
  'templates': 'jade',
  'styles': 'styl',
  'scripts': 'js'
};

// Handle Defaults
if(program.javascript === true) program.javascript = componentName + '.js';
if(program.styles === true) program.styles = componentName + '.styl';
if(program.templates === true) program.templates = 'template.jade';
if(program.partials === true) program.partials = 'template.jade';


// Make component.json
var component = {
  name: componentName,
  version: "0.0.1"
};

['partials', 'templates', 'styles', 'locals'].forEach(function(x) {
  if(program[x]) {
    component[x] = utils.parseOptionArray(program[x], extensionMap[x]);
    if(x != 'locals') {
      config.touchFiles = config.touchFiles.concat(component[x]);
    }
  }
});

if(program.javascript) {
  component.scripts = utils.parseOptionArray(program.javascript);
  component.main = component.scripts[0];
  config.touchFiles = config.touchFiles.concat(component.scripts);
}
component._prompts = ['description'];

config.component = component;

runner(config);
